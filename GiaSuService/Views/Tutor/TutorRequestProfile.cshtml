@using GiaSuService.Models.TutorViewModel
@using GiaSuService.Configs;
@model RequestTutorApplyDetailViewModel
@{
    ViewData["Title"] = "Chi tiết yêu cầu đơn tìm gia sư";
}
<!--
<div class="d-flex" style="text-align: center; justify-content:left; margin-bottom: 10px;">
    <a href="/Tutor/ListTutorApplyForm" class="btn btn-primary" style="padding: 5px 5px; display: inline-block;">Quay lại danh sách đơn đã ứng tuyển</a>
</div>
-->

<div class="container">
    <h1 class="pb-3">Chi tiết yêu cầu đơn tìm gia sư</h1>

    @if (Model.RequestStatus == "handover" && Model.QueueStatus != "handover")
    {
        <span class="text-danger">Đơn tìm gia sư này đã được giao cho gia sư khác.</span>
    }

    <div class="form-group">
        <label asp-for="RequestId">Mã đơn tìm gia sư:</label>
        <input type="number" asp-for="RequestId" class="form-control customform-control" disabled />
    </div>

    <div class="form-group">
        <label asp-for="RequestStatus">Trạng thái đơn tìm gia sư:</label>
        <input type="text" asp-for="RequestStatusDescription" class="form-control customform-control" disabled/>
    </div>

    <div class="form-group">
        <label asp-for="QueueStatus">Trạng thái ứng tuyển:</label>
        <input type="text" asp-for="QueueStatusDescription" class="form-control customform-control" disabled />
    </div>

    <div class="form-group">
        <label asp-for="NStudent">Số lượng học sinh:</label>
        <input type="number" asp-for="NStudent" class="form-control customform-control" disabled />
    </div>

    @if (Model.QueueStatus == AppConfig.QueueStatus.HANDOVER.ToString().ToLower())
    {
        <div class="form-group">
            <label asp-for="CustomerFullName">Tên khách hàng:</label>
            <input type="text" asp-for="CustomerFullName" class="form-control customform-control" disabled />
        </div>

        <div class="form-group">
            <label asp-for="Address">Email khách hàng:</label>
            <input type="text" asp-for="CustomerEmail" class="form-control customform-control" disabled />
        </div>

        <div class="form-group">
            <label asp-for="Address">SĐT khách hàng:</label>
            <input type="text" asp-for="CustomerPhone" class="form-control customform-control" disabled />
        </div>
    }

    <div class="form-group">
        <label asp-for="SubjectName">Tên môn học:</label>
        <input type="text" asp-for="SubjectName" class="form-control customform-control" disabled />
    </div>

    <div class="form-group">
        <label asp-for="GradeName">Khối lớp:</label>
        <input type="text" asp-for="GradeName" class="form-control customform-control" disabled />
    </div>

    @if (Model.QueueStatus == AppConfig.QueueStatus.HANDOVER.ToString().ToLower())
    {
        <div class="form-group">
            <label asp-for="Address">Số nhà, tên đường:</label>
            <input type="text" asp-for="Address" class="form-control customform-control" disabled />
        </div>
    }

    <div class="form-group">
        <label asp-for="Location">Quận / Huyện:</label>
        <input type="text" asp-for="Location" class="form-control customform-control" disabled />
    </div>

    <div class="form-group">
        <label asp-for="AdditionalDetail">Thông tin thêm:</label>
        <input type="text" asp-for="AdditionalDetail" class="form-control customform-control" disabled />
    </div>

    

    @if (Model.QueueStatus == AppConfig.QueueStatus.APPROVAL.ToString().ToLower())
    {
        <div class="form-group">
            <label asp-for="Price">Số tiền ứng tuyển: @string.Format("{0:#,0} VNĐ", Model.Price)</label>
            @* <input type="number" class="form-control customform-control" value="@string.Format("{0:#,0} VNĐ", Model.Price)" disabled /> *@
        </div>
    }
        
    @if ((Model.RequestStatus != AppConfig.FormStatus.DENY.ToString().ToLower() &&
          Model.RequestStatus != AppConfig.FormStatus.CANCEL.ToString().ToLower())
        &&
        (Model.QueueStatus == AppConfig.QueueStatus.PENDING.ToString().ToLower() ||
         Model.QueueStatus == AppConfig.QueueStatus.APPROVAL.ToString().ToLower() || 
         Model.QueueStatus == AppConfig.QueueStatus.HANDOVER.ToString().ToLower())   )
    {
    <div style="text-align: center;">
        <a id="cancelLink" class="btn btn-danger w-25 mt-5" href="@Url.Action("CancelApplyRequest", "Tutor", new { requestId=@Model.RequestId, queueStatus = Model.QueueStatus})">Huỷ ứng tuyển</a>
    </div>
    }

</div>
<div class="d-flex" style="text-align: center; justify-content:left; margin-bottom: 10px;">
    <a href="/Tutor/ListTutorApplyForm" class="text-decoration-none mt-5" style="padding: 5px 5px; display: inline-block;">
        <i class="fas fa-reply" aria-hidden="true"></i>
        Về trang danh sách đơn đã ứng tuyển
    </a>
</div>
<!-- Include the confirmation dialog -->
<partial name="_ConfirmationDialog" />

<script>

    // Add event listener to the submit button
    document.addEventListener('DOMContentLoaded', function () {
        var cancelLink = document.getElementById('cancelLink');
        if (cancelLink) {
            cancelLink.addEventListener('click', async function (event) {
                event.preventDefault(); // Prevent default link behavior

                var confirmed = await confirmSubmission(); // Wait for user confirmation
                if (confirmed) {
                    // User confirmed, proceed with link navigation
                    window.location.href = this.href;
                } else {
                    // User canceled
                    document.getElementById('confirmationDialog').style.display = 'none';
                }
            });
        }
    });

    // Function to display confirmation dialog and return a Promise
    function confirmSubmission() {
        return new Promise(function (resolve) {
            var requestStatus = "@Model.RequestStatus";
            var queueStatus = "@Model.QueueStatus";

            if (queueStatus == "handover" && queueStatus == "handover") {
                showConfirmationDialog("Bạn có chắc muốn huỷ ứng tuyển? Bạn sẽ không được hoàn tiền và không thể ứng tuyển lại vào đơn này nữa.", function (result) {
                    resolve(result); // Resolve the Promise with user's choice
                });
            }
            else {
                showConfirmationDialog("Bạn có chắc muốn huỷ ứng tuyển? Bạn sẽ không thể ứng tuyển lại vào đơn này nữa.", function (result) {
                    resolve(result); // Resolve the Promise with user's choice
                });
            }
        });
    }

    function showConfirmationDialog(message, callback) {
        const confirmDialog = document.getElementById('confirmationDialog');
        const confirmMsg = document.getElementById('confirmationMessage');
        const confirmYesBtn = document.getElementById('confirmYes');
        const confirmNoBtn = document.getElementById('confirmNo');

        confirmMsg.textContent = message; // Update message content

        confirmYesBtn.addEventListener('click', function () {
            confirmDialog.style.display = 'none'; // Hide dialog
            callback(true); // Callback with true when user clicks 'Yes'
        });

        confirmNoBtn.addEventListener('click', function () {
            confirmDialog.style.display = 'none'; // Hide dialog
            callback(false); // Callback with false when user clicks 'No'
        });

        document.getElementById('confirmationDialog').style.display = 'flex';
    }

</script>