@using GiaSuService.Models.EmployeeViewModel;
@model TutorTransactionDetailViewModel
@{
    ViewData["Title"] = "Chi tiết hóa đơn";
}
<!--
<div class="d-flex" style="text-align: center; justify-content:left; margin-bottom: 10px;">
    <a href="/Employee/TutorApplyQueue?requestId=@Model.TransactionDeposit?.RequestId" class="btn btn-primary" style="padding: 5px 5px; display: inline-block;">Quay lại danh sách đơn ứng tuyển</a>
</div>
-->

<div class="container">
    @if (Model.TransactionDeposit != null)
    {
        <div class="card">
            <div class="card-header">
                <h2>Hóa đơn thanh toán phí nhận lớp</h2>
            </div>
            <div class="card-body">
                <p><strong>Mã hoá đơn:</strong> @Model.TransactionDeposit.TransactionId</p>
                <p><strong>Nhân viên lập hoá đơn:</strong> @Model.TransactionDeposit.EmployeeName</p>
                <p><strong>Tên khách hàng (gia sư):</strong> @Model.TransactionDeposit.TutorName</p>
                <p><strong>Ngày tạo hoá đơn:</strong> @Model.TransactionDeposit.CreateDate</p>
                <p><strong>Ngày thanh toán:</strong> @(string.IsNullOrEmpty(Model.TransactionDeposit.PaymentDate) ? "Chưa thanh toán" : Model.TransactionDeposit.PaymentDate)</p>
                <p><strong>Số tiền:</strong> @string.Format("{0:#,0} VNĐ", Model.TransactionDeposit.Price)</p>
                <p><strong>Nội dung:</strong> @Model.TransactionDeposit.Context</p>
                
                @* @if (Model.TransactionRefund == null && string.IsNullOrEmpty(Model.TransactionDeposit.PaymentDate)) *@
                @if(Model.TransactionDeposit?.RequestStatus == "approval"
                    && Model.TransactionDeposit?.QueueStatus == "approval")
                {
                    <form id="myForm" class="needs-validation" asp-action="UpdateDepositTransaction" method="post">
                        <input type="hidden" name="tutorId" value="@Model.TransactionDeposit.TutorId">
                        <input type="hidden" name="requestId" value="@Model.TransactionDeposit.RequestId">
                        <div class="form-group">
                            <label for="paymentDate"><strong>Ngày thanh toán:</strong></label>
                            <input type="datetime-local" id="paymentDate" name="paymentDate" class="form-control customform-control" required>
                        </div>
                        <div style="text-align:center">
                        <button id="confirmPayment" type="submit" class="btn btn-outline-success w-25 mt-2" name="action" value="payment">Thanh toán</button>
                        </div>
                    </form>
                }
            </div>
        </div>
    }

    @if (Model.TransactionRefund != null)
    {
        <div class="card mt-3">
            <div class="card-header">
                <h2>Hóa đơn hoàn trả phí nhận lớp</h2>
            </div>
            <div class="card-body">
                <p><strong>Mã hoá đơn:</strong> @Model.TransactionRefund.TransactionId</p>
                <p><strong>Tên nhân viên lập hoá đơn:</strong> @Model.TransactionRefund.EmployeeName</p>
                <p><strong>Tên khách hàng (gia sư):</strong> @Model.TransactionRefund.TutorName</p>
                <p><strong>Ngày tạo hoá đơn hoàn tiền:</strong> @Model.TransactionRefund.CreateDate</p>
                <p><strong>Ngày hoàn tiền:</strong> @(string.IsNullOrEmpty(Model.TransactionRefund.PaymentDate) ? "Chưa thanh toán" : Model.TransactionRefund.PaymentDate)</p>
                <p><strong>Nội dung:</strong> @Model.TransactionRefund.Context</p>
                <p><strong>Số tiền:</strong> @string.Format("{0:#,0} VNĐ", Model.TransactionRefund.Price)</p>
            </div>
        </div>
    }
    else
    {
        <div class="mt-4 d-flex justify-content-center align-items-center">
            @if (Model.TransactionDeposit?.RequestStatus == "handover" 
                && Model.TransactionDeposit?.QueueStatus == "handover")
            {
                <a id="refundLink" href="@Url.Action("CreateRefundTransaction", "Employee", new { tutorId=Model.TransactionDeposit?.TutorId, requestId=Model.TransactionDeposit?.RequestId})" 
                class="btn btn-outline-danger w-25">Hoàn tiền</a>
            }
            @* else{<span class="text-danger">Hệ thống không tìm thấy bất cứ hóa đơn nào của gia sư tới đơn tìm này</span>} *@
        </div>
    }
</div>
<div class="d-flex" style="text-align: center; justify-content:left; margin-bottom: 10px;">
    <a href="/Employee/TutorApplyQueue?requestId=@Model.TransactionDeposit?.RequestId" class="text-decoration-none" style="padding: 5px 5px; display: inline-block;">
        <i class="fas fa-reply" aria-hidden="true"></i>
        Về trang danh sách đơn ứng tuyển
    </a>
</div>
<!-- Include the confirmation dialog -->
<partial name="_ConfirmationDialog" />


<script>
    document.addEventListener('DOMContentLoaded', function () {
        const now = new Date();
        const year = now.getFullYear();
        const month = String(now.getMonth() + 1).padStart(2, '0'); // Month is zero-based
        const day = String(now.getDate()).padStart(2, '0');
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;

        // Set the value of the datetime-local input to the current date and time
        document.getElementById('paymentDate').value = formattedDateTime;
    });

    // Add event listener to the submit button
    document.addEventListener('DOMContentLoaded', function () {
        var submitButton = document.querySelector('button[type="submit"]');
        if (submitButton) {
            submitButton.addEventListener('click', function (event) {
                event.preventDefault(); // Prevent default form submission
                confirmSubmission().then(function (confirmed) {
                    if (confirmed) {
                        // User confirmed, manually trigger form submission
                        var form = document.getElementById('myForm');
                        if (form) form.submit();
                    } else {
                        // User canceled
                        document.getElementById('confirmationDialog').style.display = 'none';
                    }
                });
            });
        }
    });

    // Add event listener to the refund button
    document.addEventListener('DOMContentLoaded', function () {
        var refundLink = document.getElementById('refundLink');

        if (refundLink) {
            refundLink.addEventListener('click', async function (event) {
                event.preventDefault(); // Prevent default link behavior

                var confirmed = await refundSubmission(); // Wait for user confirmation
                if (confirmed) {
                    // User confirmed, proceed with link navigation
                    window.location.href = this.href;
                } else {
                    // User canceled
                    document.getElementById('confirmationDialog').style.display = 'none';
                }
            });
        }
    });

    // Function to display confirmation dialog and return a Promise
    function confirmSubmission() {
        return new Promise(function (resolve) {
            showConfirmationDialog("Xác nhận thanh toán?", function (result) {
                resolve(result); // Resolve the Promise with user's choice
            });
        });
    }

    // Function to display confirmation dialog and return a Promise
    function refundSubmission() {
        return new Promise(function (resolve) {
            showConfirmationDialog("Xác nhận hoàn tiền?", function (result) {
                resolve(result); // Resolve the Promise with user's choice
            });
        });
    }

    function showConfirmationDialog(message, callback) {
        const confirmDialog = document.getElementById('confirmationDialog');
        const confirmMsg = document.getElementById('confirmationMessage');
        const confirmYesBtn = document.getElementById('confirmYes');
        const confirmNoBtn = document.getElementById('confirmNo');

        confirmMsg.textContent = message; // Update message content

        confirmYesBtn.addEventListener('click', function () {
            confirmDialog.style.display = 'none'; // Hide dialog
            callback(true); // Callback with true when user clicks 'Yes'
        });

        confirmNoBtn.addEventListener('click', function () {
            confirmDialog.style.display = 'none'; // Hide dialog
            callback(false); // Callback with false when user clicks 'No'
        });

        document.getElementById('confirmationDialog').style.display = 'flex';
    }
</script>