@using GiaSuService.Models.EmployeeViewModel;
@model TutorRequestProfileEditViewModel;
@{
    ViewData["Title"] = "Chỉnh sửa đơn tìm gia sư";
}
<style>
    .disabled-link {
        pointer-events: none; /* Disable mouse events */
    }
</style>

<div class="container">
    <div id="list-tutor" class="row d-flex justify-content-center">
    </div>
    @* <div class="d-flex justify-content-center">
        <a id="choose-tutor" class="btn btn-primary" href="@Url.Action("TutorList", "Home")">Chọn Gia sư</a>
    </div> *@
    <hr />
    <div class="d-flex" style="text-align: center; justify-content:left; margin-bottom: 10px;">
        <a href="/Employee/TutorRequestList" class="text-decoration-none" style="padding: 5px 5px; display: inline-block;">
            <i class="fas fa-reply" aria-hidden="true"></i>
            Về lại danh sách các đơn tìm đã duyệt
        </a>
    </div>

    <h1>Đơn tìm gia sư</h1>

    @* <form asp-action="UpdateTutorRequestEdit" asp-controller="Employee" method="post"> *@
    <form asp-controller="Employee" method="post">
        <input type="hidden" asp-for="RequestId"/>
        <div class="form-group">
            <label asp-for="NStudents">Số lượng học sinh:</label>
            <input asp-for="NStudents" type="number" min="1" max="9" class="form-control customform-control" required />
            <span asp-validation-for="NStudents" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="AdditionalDetail">Thông tin bổ sung (Nếu có):</label>
            <textarea asp-for="AdditionalDetail" rows="5" class="form-control customform-control"></textarea>
        </div>
        <div class="form-group">
            <label for="province">Tỉnh/ Thành phố:</label>
            <select class="form-select customform-control" asp-for="ProvinceId" id="province" onchange="getDistricts()">
            </select>
        </div>

        <div class="form-group">
            <label>Quận:</label>
            <select id="district" asp-for="DistrictId" class="form-select customform-control">
                <option>Chọn quận</option>
            </select>
        </div>

        <div class="form-group">
            <label asp-for="Addressdetail">Địa chỉ chi tiết:</label>
            <input asp-for="Addressdetail" class="form-control customform-control" />
        </div>

        <div class="form-group">
            <label for="subject">Môn học:</label>
            <select asp-for="SubjectId" class="form-select customform-control" id="subject">
                @if (Model.Subjects != null)
                {
                    @foreach (var subject in Model.Subjects)
                    {
                        @if(subject.SubjectId == Model.SubjectId)
                        {
                            <option selected value="@subject.SubjectId">@subject.SubjectName</option>
                        }else{
                            <option value="@subject.SubjectId">@subject.SubjectName</option>
                        }
                    }
                }
            </select>
        </div>

        <div class="form-group">
            <label for="grade">Khối lớp:</label>
            <select asp-for="GradeId" class="form-select customform-control" id="grade">
                @if (Model.Grades != null)
                {
                    @foreach (var grade in Model.Grades)
                    {
                        @if(grade.GradeId == Model.GradeId)
                        {
                            <option selected value="@grade.GradeId">@grade.GradeName</option>
                        }else{
                            <option value="@grade.GradeId">@grade.GradeName</option>
                        }
                    }
                }
            </select>
        </div>

        <div class="form-group">
            <label>Thời gian dạy:</label>
            <div class="row row-cols-3">
                @for (int i = 0; i < Model.Sessions.Count(); i++)
                {
                    Model.Sessions[i].IsChecked = Model.SelectedBefore.Contains(Model.Sessions[i].SessionId);
                    <div class="checkbox">
                        <label>
                            @Html.HiddenFor(m => m.Sessions[i].SessionId)
                            @Html.CheckBoxFor(m => m.Sessions[i].IsChecked, new {@class = "form-check-input customformcheck-input"})
                            @Model.Sessions[i].SessionName
                        </label>
                    </div>
                }
            </div>
        </div>

        @* <button type="submit" class="btn btn-primary customstyle-button">Cập nhật</button> *@
        <div style="text-align: center;">
            <button id="cancelRequest" type="submit" formaction="@Url.Action("CancelTutorRequest", "Employee")" class="btn btn-outline-danger w-25 mt-5">Hủy bỏ</button>
            <button id="updateRequest" type="submit" formaction="@Url.Action("UpdateTutorRequestEdit", "Employee")" class="btn btn-primary customstyle-button w-25 mt-5">Cập nhật</button>
        </div>
    </form>
</div>

<partial name="_ConfirmationDialog" />

<script>
    function getDistricts() {
        $("#provincedefault").remove();

        var selectedIdProvince = $("#province").val();
        $.ajax({
            url: `/Identity/Districts`,
            type: 'GET',
            data: { 'provinceId': selectedIdProvince },
            success: function (data) {
                $("#district").empty(); // Replace the content with updated data
                for (var i = 0; i < data.length; i++) {
                    $("#district").append($('<option></option>').val(data[i].districtId).text(data[i].districtName));
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("Error fetching districts:", textStatus, errorThrown);
            }
        });
    }

    document.addEventListener("DOMContentLoaded", function () {
        firstLoad(); // Call the getProvinces function when the view is first loaded
        setEditMode();  //This function to set if TutorRequestForm is not pending or approval then user cannot update this form
    });

    function setEditMode() {
        var status = "@Model.CurrentStatus";

        if (!(status == "pending" || status == "approval")) {
            document.querySelectorAll('input').forEach(function (input) {
                input.disabled = true;
            });

            document.querySelectorAll('textarea').forEach(function (textarea) {
                textarea.disabled = true;
            });

            document.querySelectorAll('select').forEach(function (select) {
                select.disabled = true;
            });

            document.querySelectorAll('button').forEach(function (button) {
                button.disabled = true;
            });

            document.getElementById('choose-tutor').classList.add('disabled-link');
        }
    }


    function firstLoad() {
        var selectedProvinceId = "@Model.ProvinceId";
        $.ajax({
            url: `/Identity/Provinces`,
            type: 'GET',
            success: function (data) {
                $("#province").empty();
                for (var i = 0; i < data.length; i++) {
                    var option = $('<option></option>').val(data[i].provinceId).text(data[i].provinceName);
                    if (data[i].provinceId == selectedProvinceId) {
                        option.prop('selected', true);
                    }
                    $("#province").append(option);
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("Error fetching provinces:", textStatus, errorThrown);
            }
        });

        var selectedDistrictId = "@Model.DistrictId";
        $.ajax({
            url: `/Identity/Districts`,
            type: 'GET',
            data: { 'provinceId': selectedProvinceId },
            success: function (data) {
                $("#district").empty();
                for (var i = 0; i < data.length; i++) {
                    var option = $('<option></option>').val(data[i].districtId).text(data[i].districtName);
                    if (data[i].districtId == selectedDistrictId) {
                        option.prop('selected', true);
                    }
                    $("#district").append(option);
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                console.error("Error fetching districts:", textStatus, errorThrown);
            }
        });
    }

    $.ajax({
        url: `/Customer/GetTutorsSelectedInCookie`,
        success: function (data) {
            $("#list-tutor").empty();
            for (var i = 0; i < data.length; i++) {
                item = data[i];

                $("#list-tutor")
                    .append(`
                        <div id="${item.id}_view" class="col-md-4 mb-3">
                            <div class="card">
                                <div class="card-body">
                                    <div class="d-flex align-items-center justify-content-between">
                                        <img src="${item.avatar}" alt="Avatar" class="img-fluid" style="width: 100px; height: 100px;">
                                        <div class="m-lg-2">
                                            <h5 class="card-text fs-6">Gia Sư: ${item.fullName} </h5>
                                            <p class= "card-text mb-1" > Tutor Type: ${item.tutorType} </p>
                                            <p class= "card-text mb-1" > College: ${item.college} </p>
                                            <p class="card-text mb-1">Area: ${item.area}</p>
                                        </div>
                                    </div>
                                </div>

                                <div class="d-flex justify-content-center align-items-center mb-3">
                                     <a onclick="deleteTutor(${item.id})" class="btn btn-danger")">Hủy chọn</a>
                                </div>
                            </div>
                        </div>
                        `)
            }
        }
    })

    function deleteTutor(id) {
        event.preventDefault();
        $.ajax({
            url: "/Customer/DeleteTutorRequest",
            type: "GET",
            data: { id: id },
            success: function () {
                $(`#${id}_view`).fadeOut("fast", function () { // Animate the removal
                    $(`#${id}_view`).remove();
                });
            },
            error: function (jqXHR, textStatus, errorThrown) {
                // Handle network or server errors (optional)
                console.error("Error deleting tutor:", textStatus, errorThrown);
                alert("An error occurred while deleting the tutor.");
            }
        })
    }

    $(document).ready(function () {
        // Add a submit event listener to the form
        $("#cancelRequest").click(async function (event) {
            event.preventDefault();
            var confirmed = await confirmDialog("Thông báo xác nhận", "Bạn có chắc muốn huỷ đơn tìm gia sư này?"); // Wait for user confirmation
            event.preventDefault();
            if (confirmed) {
                // Submit the form if confirmed
                $(this).closest('form').attr('action', '@Url.Action("CancelTutorRequest", "Customer")').submit();
            }
        });

        // Add a submit event listener to the form
        $("#updateRequest").click(async function (event) {
            event.preventDefault();
            var confirmed = await confirmDialog("Thông báo xác nhận", "Bạn có chắc muốn cập nhật đơn tìm gia sư này?"); // Wait for user confirmation
            if (confirmed) {
                // Submit the form if confirmed
                $(this).closest('form').attr('action', '@Url.Action("UpdateTutorRequestEdit", "Customer")').submit();
            }
        });
    });

    function confirmDialog(title, message) {
        return new Promise(function (resolve) {
            showDialog(title, message, function (result) {
                resolve(result); // Resolve the Promise with user's choice
            });
        });
    }

    function showDialog(title, message, callback) {
        const dialogTitle = document.getElementById('dialogTitle');
        const confirmDialog = document.getElementById('confirmationDialog');
        const confirmMsg = document.getElementById('confirmationMessage');
        const confirmYesBtn = document.getElementById('confirmYes');
        const confirmNoBtn = document.getElementById('confirmNo');

        dialogTitle.textContent = title;
        confirmMsg.textContent = message; // Update message content

        confirmYesBtn.addEventListener('click', function () {
            confirmDialog.style.display = 'none'; // Hide dialog
            callback(true); // Callback with true when user clicks 'Yes'
        });

        confirmNoBtn.addEventListener('click', function () {
            confirmDialog.style.display = 'none'; // Hide dialog
            callback(false); // Callback with false when user clicks 'No'
        });

        document.getElementById('confirmationDialog').style.display = 'flex';
    }
</script>