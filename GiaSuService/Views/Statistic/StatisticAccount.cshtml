@{
    ViewData["Title"] = "Thống kế số tài khoản được tạo";
}

<h1>Thống kê tài khoản</h1>
<div>
    <section class="py-3 py-md-5">
        <h3>Thống kê số tài khoản</h3>
        <div class="container">
            <div class="row justify-content-center">
                @* Tutor *@
                <div class="col-xl-4 col-md-12 mb-3">
                    <div class="row gy-4">
                        <div class="col-12">
                            <div class="card widget-card border-light shadow-sm">
                                <div class="card-body p-4">
                                    <div class="row">
                                        <div class="col-6">
                                            <h5 class="card-title widget-card-title mb-3">
                                                Gia sư
                                            </h5>
                                            <p>Số lượng: <label class="card-subtitle" id="totalTutor">10000</label></p>
                                            <i class="fa fa-graduation-cap" style="font-size: 64px; left: 20px;"></i>
                                        </div>
                                        <div class="col-6" style="height:150px">
                                            <canvas id="chartTutor"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @* Employee *@
                <div class="col-xl-4 col-md-12 mb-3">
                    <div class="row gy-4">
                        <div class="col-12">
                            <div class="card widget-card border-light shadow-sm">
                                <div class="card-body p-4">
                                    <div class="row">
                                        <div class="col-6">
                                            <h5 class="card-title widget-card-title mb-3">
                                                Nhân viên
                                            </h5>
                                            <p>Số lượng: <label class="card-subtitle" id="totalEmp">10000</label></p>
                                            <i class="fas fa-user-tie" style="font-size: 64px; left: 20px;"></i>
                                        </div>
                                        <div class="col-6" style="height:150px">
                                            <canvas id="chartEmp"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @* Customer *@
                <div class="col-xl-4 col-md-12 mb-3">
                    <div class="row gy-4">
                        <div class="col-12">
                            <div class="card widget-card border-light shadow-sm">
                                <div class="card-body p-4">
                                    <div class="row">
                                        <div class="col-6">
                                            <h5 class="card-title widget-card-title mb-3">
                                                Khách hàng
                                            </h5>
                                            <p>Số lượng: <label class="card-subtitle" id="totalCustomer">10000</label></p>
                                            <i class="fas fa-users" style="font-size: 64px; left: 20px;"></i>

                                        </div>
                                        <div class="col-6" style="height:150px">
                                            <canvas id="chartCustomer"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @* Account All Role *@
                <div class="col-xl-6 col-md-12 mb-3">
                    <div class="row gy-4">
                        <div class="col-12">
                            <div class="card widget-card border-light shadow-sm">
                                <div class="card-body p-4">
                                    <div class="row">
                                        <div class="col-6">
                                            <h5 class="card-title widget-card-title mb-3">Tổng số tài khoản</h5>
                                            <p>Số lượng: <label class="card-subtitle" id="totalAccounts">10000</label></p>
                                            <i class="fas fa-user-circle" style="font-size: 88px; left: 20px;"></i>
                                        </div>
                                        <div class="col-6">
                                            <canvas id="chartAccount"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @* Tutor Status Statistic *@
                <div class="col-xl-6 col-md-12 mb-3">
                    <div class="row gy-4">
                        <div class="col-12">
                            <div class="card widget-card border-light shadow-sm">
                                <div class="card-body p-4">
                                    <div class="row">
                                        <div class="col-12">
                                            <h5 class="card-title widget-card-title mb-3">Trạng thái tài khoản gia sư</h5>
                                        </div>
                                        <div class="col-6">
                                            <canvas id="chartTutorStatus"></canvas>
                                        </div>
                                        <div class="col-6">
                                            <canvas id="chartTutorActive"></canvas>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section>
        <div class="container">
            <h3>Thống kê tài khoản được tạo</h3>
            <div class="row bg-white border-1">
                <div class="col-12">
                    <div class="row">
                        <div class="col-3 mt-3">
                            <select id="typeStatistic" class="form-select customform-control">
                                @* <option selected value="this_week">Trong tuần này</option> *@
                                <option value="this_month" selected>Trong tháng này</option>
                                <option value="custom">Chọn từ ngày</option>
                            </select>
                        </div>
                        <div class="col-3 mt-3">
                            <input type="date" class="form-control customform-control" id="fromDateInput">
                        </div>
                        <div class="col-3 mt-3">
                            <input type="date" class="form-control customform-control" id="toDateInput">
                        </div>
                        <div class="col-3 mt-3">
                            <button onclick="buttonFetch()" class="btn btn-primary customstyle-button" type="button">Thống kê</button>
                        </div>
                    </div>
                </div>
                <div class="row col-12">
                    <div class="col-8 border-end mt-2">
                        <canvas id="chartRegister" width="400" height="200"></canvas>
                    </div>
                    <div class="col-4 mt-4" id="statisticForChart">
                        <p>Số tài khoản khách hàng được tạo: ${}</p>
                        <p>Tài khoản khách hàng <br /> ${tăng} so với %{}%<span>{}%</span></p> 
                        <hr />
                        <p>Số tài khoản gia sư được tạo: ${}</p>
                        <p>Tài khoản gia sư <br /> ${tăng} so với %{}%<span>{}%</span></p>
                        <hr />
                        <p>Số tài khoản nhân viên trong: ${}</p>
                        <p>Tài khoản nhân viên <br /> ${tăng} so với %{}%<span>{}%</span></p>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>


<script>
    //Init
    const selectElement = document.getElementById('typeStatistic');
    const fromDateInput = document.getElementById('fromDateInput');
    const toDateInput = document.getElementById('toDateInput');

    // Initially hide the input fields
    fromDateInput.style.display = 'none';
    toDateInput.style.display = 'none';

    // Event listener for select change
    selectElement.addEventListener('change', function () {
        const selectedValue = this.value;
        if (selectedValue === 'custom') {
            // Show the input fields
            fromDateInput.style.display = 'block';
            toDateInput.style.display = 'block';
        } else {
            // Hide the input fields
            fromDateInput.style.display = 'none';
            toDateInput.style.display = 'none';
        }
    });

    fetch(`/Statistic/GetAnalystForEachRole`, {
        method: 'GET',
        body: JSON.stringify(),
        headers: { 'Content-Type': 'application/json' }
    })
        .then(response => response.json())
        .then(data => {

            // Use data (which should be the parsed JSON response)
            var dataCustomer = JSON.parse(data.jsonCustomerStatisc);
            var dataTutor = JSON.parse(data.jsonTutorStatisc);
            var dataEmployee = JSON.parse(data.jsonEmployeeStatisc);
            // Color background
            var colorBGAccount = ['#46BFBD', '#F7464A'];
            var colorBGHoverAccount = ['#5AD3D1', '#FF5A5E'];

            //labels and data
            var labelAccountSet = data => {
                return data.labels.map(value => {
                    if (value === 'False') {
                        return 'Hợp lệ';
                    } else {
                        return 'Bị khóa';
                    }
                });
            };

            updateChartAndHtag("totalCustomer", "chartCustomer", dataCustomer.data, labelAccountSet(dataCustomer), dataCustomer.total, "Trạng thái của khách hàng", colorBGAccount, colorBGHoverAccount, 'bottom');
            updateChartAndHtag("totalTutor", "chartTutor", dataTutor.data, labelAccountSet(dataTutor), dataTutor.total, "Trạng thái của gia sư", colorBGAccount, colorBGHoverAccount, 'bottom');
            updateChartAndHtag("totalEmp", "chartEmp", dataEmployee.data, labelAccountSet(dataEmployee), dataEmployee.total, "Trạng thái của nhân viên", colorBGAccount, colorBGHoverAccount, 'bottom');

            updateChartAndHtag("totalAccounts",
                "chartAccount",
                [dataTutor.total, dataCustomer.total, dataEmployee.total],
                ["Gia sư", "Phụ huynh", "Nhân viên"],
                dataTutor.total + dataCustomer.total + dataEmployee.total,
                "Phân loại tài khoản",
                ['#20BDBE', '#FF9933', '#AA87FF'],
                ['#42C7D9', '#FFB347', '#C3A0FF'],
                'right'
            );

            var dataTutorStatus = JSON.parse(data.jsonTutorStatusStatisc);
            // console.log(dataTutorStatus);
            // var labelTutorStatusSet = data => {
            //     return data.labels.map(value => {
            //         if (value === 'pending') {
            //             return 'Đang chờ duyệt';
            //         } else if (value === 'deny') {
            //             return 'Bị từ chối';
            //         } else if (value === 'update') {
            //             return 'Chờ cập nhật';
            //         } else {
            //             return 'Được phê duyệt';
            //         }
            //     });
            // };
            updateChartAndHtag("",
                "chartTutorStatus",
                dataTutorStatus.data,
                dataTutorStatus.labels,
                0,
                "Trạng thái yêu cầu tạo tài khoản gia sư",
                ['#A2C480', '#CEEBF3', '#F7464A', '#99D4FF'],
                ['#C3D9A5', '#D9F2F7', '#FF5A5E', '#B3F0FF'],
                'right'
            );

            var dataTutorActive = JSON.parse(data.jsonTutorActiveStatisc);
            var labelTutorActiveSet = data => {
                return data.labels.map(value => {
                    if (value === 'True') {
                        return 'Còn hoạt động';
                    } else {
                        return 'Dừng hoạt động';
                    }
                })
            }
            updateChartAndHtag("",
                "chartTutorActive",
                dataTutorActive.data,
                labelTutorActiveSet(dataTutorActive),
                0,
                "Trạng thái hoạt động",
                ['#F7464A', '#A2C480'],
                ['#FF5A5E', '#C3D9A5'],
                'right'
            );
            buttonFetch();
        });

    function updateChartAndHtag(idHtag, idChart, data, label, total, title, bgColor, bgHoverColor, position) {
        // Update the h4 tag content
        if (idHtag !== "") {
            document.getElementById(idHtag).textContent = total;
        }

        // Prepare chart data with label conversion
        const chartData = {
            labels: label,
            datasets: [{
                data: data,
                backgroundColor: bgColor,
                hoverBackgroundColor: bgHoverColor
            }]
        };

        // Create or update the chart
        const ctx = document.getElementById(idChart).getContext('2d');
        const existingChart = Chart.getChart(ctx);

        if (existingChart) {
            existingChart.data = chartData;
            existingChart.update(); // Update existing chart with new data
        } else {
            const myChart = new Chart(ctx, {
                type: 'pie',
                data: chartData,
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: position,
                        },
                        title: {
                            display: true,
                            text: title
                        }
                    }
                }
            });
        }
    }
    const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
    function getChartData(type, fromDate, toDate) {
        $.ajax({
            url: '/Statistic/GetAccountData',
            type: 'GET',
            data: {
                type: type,
                fromDate: fromDate,
                toDate: toDate
            },
            success: function (data) {
                const jsonData = JSON.parse(data.jsonRegisterStatisc);
                // console.log(jsonData);
                const roles = ['customer', 'employee', 'tutor'];
                const colors = ['#ff6384', '#36a2eb', '#cc65fe'];

                // CAR
                const totalCustomers = document.getElementById("totalCustomer").textContent;
                const totalTutors = document.getElementById("totalTutor").textContent;
                const totalEmployee = document.getElementById("totalEmp").textContent;

                const [customerRegisters, customerCAR] = calculateCARForRole(jsonData, totalCustomers, "customer");
                const [tutorRegisters, tutorCAR] = calculateCARForRole(jsonData, totalTutors, "tutor");
                const [employeeRegisters, employeeCAR] = calculateCARForRole(jsonData, totalEmployee, "employee");

                // Tạo HTML với các giá trị được gán
                const htmlTemplate = `
                          <p>Tổng số tài khoản khách hàng: ${customerRegisters}</p>
                               <p><i class="fas fa-chart-line p-2"></i>Tốc độ tăng trưởng khách hàng mới: ${customerCAR}%</p>
                      <hr />
                          <p>Tổng số tài khoản gia sư: ${tutorRegisters}</p>
                                 <p><i class="fas fa-chart-line p-2"></i>Tốc độ tăng trưởng gia sư: ${tutorCAR}%</p>
                      <hr />
                          <p>Tổng số tài khoản nhân viên: ${employeeRegisters}</p>
                              <p><i class="fas fa-chart-line p-2"></i>Tốc độ tăng trưởng nhân viên ${employeeCAR}%</p>
                    `;

                // Get the div element
                const statisticForChartDiv = document.getElementById("statisticForChart");

                // Check if the div element exists
                if (statisticForChartDiv) {
                    // Clear the content inside the div
                    statisticForChartDiv.innerHTML = '';

                    // Set the HTML template as the content of the div
                    statisticForChartDiv.innerHTML = htmlTemplate;
                } else {
                    console.log("Element with ID 'statisticForChart' not found.");
                }

                var histogramData = {};
                if (type !== 'this_week') {
                    histogramData = roles.map((role, index) => ({
                        label: role,
                        data: Object.keys(jsonData).map(date => jsonData[date][role] || 0),
                        backgroundColor: colors[index],
                        borderWidth: 1
                    }));



                } else {
                    const weeklyData = new Map(); // Store weekly data separately
                    daysOfWeek.forEach(day => {
                        if (jsonData.hasOwnProperty(day)) {
                            weeklyData.set(day, { "customer": jsonData[day].customer || 0, "employee": jsonData[day].employee || 0, "tutor": jsonData[day].tutor || 0 });
                        } else {
                            weeklyData.set(day, { "customer": 0, "employee": 0, "tutor": 0 });
                        }
                    });

                    const mappedData = Array.from(weeklyData.values(), data => data || 0);

                    histogramData = roles.map((role, index) => ({
                        label: role,
                        data: Array.from(weeklyData.values(), data => data[role] || 0),
                        backgroundColor: colors[index],
                        borderWidth: 1
                    }));

                }


                function createChart() {

                    //console.log(`Label is ${daysOfWeek}\nData is ${histogramData}`);
                    const ctx = document.getElementById('chartRegister').getContext('2d');
                    const existingChart = Chart.getChart(ctx);

                    if (existingChart) {
                        existingChart.destroy(); // Update existing chart with new data
                    }
                    const currentChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: type !== 'this_week' ? Object.keys(jsonData) : daysOfWeek, // Use daysOfWeek for 'this_week' case
                            datasets: histogramData // Use datasets for 'this_week' case
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                title: {
                                    display: true,
                                    text: 'Số tài khoản được tạo'
                                }
                            },
                            scales: {
                                y: {
                                    ticks:
                                    {
                                        precision: 0,
                                        stepSize: 1
                                    }
                                }
                            },
                            legend: {
                                display: true // Hide legend for 'this_week' case
                            }
                        }
                    });
                }

                // Initial chart creation
                createChart();
            }
        });
    }


    function buttonFetch() {
        const type = selectElement.value;
        const fromDate = fromDateInput.value;
        const toDate = toDateInput.value;

        getChartData(type, fromDate, toDate);
    }


    function calculateCARForRole(jsonData, totalClients, role) {
        let acquisitionCount = 0;
        for (const date in jsonData) {
            if (jsonData.hasOwnProperty(date)) {
                const entry = jsonData[date];
                // Check if the role exists in the entry
                if (role in entry) {
                   
                    acquisitionCount += jsonData[date][role];
                }
            }
        }
        const CAR = (acquisitionCount / totalClients) * 100;
        return [
            acquisitionCount,
            CAR.toFixed(2)
        ]; // Return CAR rounded to 2 decimal places
    }
</script>
