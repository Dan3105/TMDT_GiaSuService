@{
    ViewData["Title"] = "Thống kê đơn tìm gia sư";
}
@using GiaSuService.Models.UtilityViewModel;
@model TutorRequestStatisticsViewModel;


<div class="container">
    <div class="row">
        <div class="col-12">
            <section>
                <h3>Thống kê đơn tìm gia sư</h3>
                <div class="row">
                    <div class="col-xl-4 col-sm-6">
                        <div class="card widget-card border-light shadow-sm mb-3">
                            <div class="card-body p-4">
                                <div class="d-flex align-items-center flex-column">
                                    <p>
                                        <b>Số đơn tìm gia sư đang chờ duyệt</b>
                                    </p>
                                    <label>@Model.TotalPending</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xl-4 col-sm-6">
                        <div class="card widget-card border-light shadow-sm mb-3">
                            <div class="card-body p-4">
                                <div class="d-flex align-items-center flex-column">
                                    <p>
                                        <b>Số đơn tìm gia sư  được chấp thuận</b>
                                    </p>
                                    <label>@Model.TotalApproval</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xl-4 col-sm-6">
                        <div class="card widget-card border-light shadow-sm mb-3">
                            <div class="card-body p-4">
                                <div class="d-flex align-items-center flex-column">
                                    <p>
                                        <b>Số đơn tìm gia sư bị từ chối</b>
                                    </p>
                                    <label>@Model.TotalDeny</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xl-4 col-sm-6">
                        <div class="card widget-card border-light shadow-sm mb-3">
                            <div class="card-body p-4">
                                <div class="d-flex align-items-center flex-column">
                                    <p>
                                        <b>Số đơn tìm gia sư đã giao</b>
                                    </p>
                                    <label>@Model.TotalHandover</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xl-4 col-sm-6">
                        <div class="card widget-card border-light shadow-sm mb-3">
                            <div class="card-body p-4">
                                <div class="d-flex align-items-center flex-column">
                                    <p>
                                        <b>Số đơn tìm gia sư đã bị hủy</b>
                                    </p>
                                    <label>@Model.TotalCancel</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xl-4 col-sm-6">
                        <div class="card widget-card border-light shadow-sm mb-3">
                            <div class="card-body p-4">
                                <div class="d-flex align-items-center flex-column">
                                    <p>
                                        <b>Số đơn tìm gia sư đã hết hạn</b>
                                    </p>
                                    <label>@Model.TotalExpired</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>
        <div class="col-12">
            <h3>Biểu đồ thống kê số đơn được tạo</h3>
            <div class="col-12 mb-2">
                <div class="row">
                    <div class="col-12 mb-3 row">
                        <div class="col-3">
                            <select id="typeStatistic" class="form-select">
                                <option value="this_week">Trong tuần này</option>
                                <option selected value="this_month">Trong tháng này</option>
                                <option value="custom">Chọn từ ngày</option>
                            </select>
                        </div>
                        <div class="col-3">
                            <input type="date" class="form-control customform-control" id="fromDateInput">
                        </div>
                        <div class="col-3">
                            <input type="date" class="form-control customform-control" id="toDateInput">
                        </div>
                        <div class="col-3">
                            <button onclick="buttonFetch()" class="btn btn-primary customstyle-button" type="button">Thống kê</button>
                        </div>
                    </div>


                    <div class="col-xl-6 col-sm-12 d-flex flex-column align-items-center">
                        <h5>Biểu đồ số đơn tìm gia sư được tạo</h5>
                        <label id="totalQuery">(Tổng số đơn: 0)</label>
                        <canvas id="chartCreateRequest" width="400" height="200"></canvas>
                    </div>
                    <div class="col-xl-3 col-sm-6">
                        <h5>Tổng quan trạng thái các đơn tìm</h5>
                        <canvas id="chartStatusRequest" width="300" height="300"></canvas>
                    </div>
                    <div class="col-xl-3 col-sm-6">
                        <h5>Biểu đồ các môn học được chọn nhiều nhất</h5>
                        <canvas id="chartTopSubject" width="300" height="300">
                            
                        </canvas>
                        
                    </div>
                </div>

            </div>

        </div>
    </div>
</div>

<script>
    //Init
    const selectElement = document.getElementById('typeStatistic');
    const fromDateInput = document.getElementById('fromDateInput');
    const toDateInput = document.getElementById('toDateInput');

    // Initially hide the input fields
    fromDateInput.style.display = 'none';
    toDateInput.style.display = 'none';

    // Event listener for select change
    selectElement.addEventListener('change', function () {
        const selectedValue = this.value;
        if (selectedValue === 'custom') {
            // Show the input fields
            fromDateInput.style.display = 'block';
            toDateInput.style.display = 'block';
        } else {
            // Hide the input fields
            fromDateInput.style.display = 'none';
            toDateInput.style.display = 'none';
        }
    });

    buttonFetch();
    function buttonFetch() {
        const type = selectElement.value;
        const fromDate = fromDateInput.value;
        const toDate = toDateInput.value;

        $.ajax({
            url: '/Statistic/StatisticTutorRequestCreate',
            type: 'GET',
            data: {
                type: type,
                fromDate: fromDate,
                toDate: toDate
            },
            success: function (data) {
                let dataTutorRequest = JSON.parse(data.jsonTutorRequestCreate);
                let dataTutorRequestStatus = JSON.parse(data.jsonTutorRequestStatus);
                let dataTutorRequestSubject = JSON.parse(data.jsonTutorRequestSubject);

                const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];

                function generateLineChart(data, idChart, label = null) {
                    const dates = Object.keys(data);
                    const counts = Object.values(data);

                    const ctx = document.getElementById(idChart).getContext('2d');
                    const existingChart = Chart.getChart(ctx);
                    if (existingChart) {
                        existingChart.destroy();
                    }
                    const myChart = new Chart(ctx, {
                        type: 'line',
                        data: {
                            labels: label ? label : dates,
                            datasets: [{
                                data: counts,
                                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                                borderColor: 'rgba(54, 162, 235, 1)',
                                borderWidth: 1
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: {
                                    display: false // Hide the legend
                                },
                                title: {
                                    display: false,
                                }
                            },
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    ticks:
                                    {
                                        precision: 0,
                                        stepSize: 1
                                    }
                                }
                            }
                        }
                    });
                }

                const colors = ['#003f5c', '#2f4b7c', '#665191', '#a05195', '#d45087', '#f95d6a', '#ff7c43', '#ffa600'];

                function drawPieChart(data, canvasId, maxItems = 5) {
                    if (Object.keys(data).length === 0) {
                        const canvas = document.getElementById(canvasId);
                        canvas.style.display = 'none'; // Hide canvas element
                        const label = document.createElement('label');
                        label.classList.add('text-danger', 'text-center');
                        label.textContent = "Biểu đồ không có vì không có đơn nào được tạo";
                        canvas.parentNode.replaceChild(label, canvas);
                        return; // Exit the function
                    }

                    const labels = Object.keys(data);
                    const values = Object.values(data);
                    // console.log(labels, values);
                    // Sort data by values in descending order
                    const sortedData = labels.map((label, index) => ({ label, value: values[index] }))
                        .sort((a, b) => b.value - a.value);

                    // If there are more than maxItems, aggregate the rest into 'Other' category
                    const otherSum = sortedData.slice(maxItems)
                        .reduce((acc, curr) => acc + curr.value, 0);

                    const topData = sortedData.slice(0, maxItems);
                    if (otherSum > 0) {
                        topData.push({ label: 'Other', value: otherSum });
                    }

                    const topLabels = topData.map(item => item.label);
                    const topValues = topData.map(item => item.value);

                    const ctx = document.getElementById(canvasId).getContext('2d');
                    const existingChart = Chart.getChart(ctx);

                    if (existingChart) {
                        existingChart.destroy(); // Update existing chart with new data
                    }
                    const myChart = new Chart(ctx, {
                        type: 'doughnut',
                        data: {
                            labels: topLabels,
                            datasets: [{
                                data: topValues,
                                backgroundColor: colors.slice(0, topLabels.length),
                                borderColor: 'rgba(255, 255, 255, 1)', // Border color for each slice
                                borderWidth: 0.6
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                }
                            }
                        }
                    });


                }
                
                //Calculate total
                const total = Object.values(dataTutorRequest).reduce((acc, crr) => acc += crr, 0);
                document.getElementById('totalQuery').innerHTML = `(Tổng số đơn được tạo: ${total})`;
                
                //Draw Line Chart and Pie Chart
                if (type === "this_week") {
                    let chartData = new Map();
                    daysOfWeek.forEach(p => {
                        chartData.set(p, dataTutorRequest.hasOwnProperty(p) ? dataTutorRequest[p] : 0);
                    });
                    generateLineChart(chartData, 'chartCreateRequest', daysOfWeek);
                }
                else {
                    generateLineChart(dataTutorRequest, 'chartCreateRequest');
                }

                console.log(dataTutorRequestStatus);
                drawPieChart(dataTutorRequestStatus, 'chartStatusRequest', 6);
                drawPieChart(dataTutorRequestSubject, 'chartTopSubject', 5);
            }
        });
    }


</script>