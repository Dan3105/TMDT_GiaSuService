@{
    ViewData["Title"] = "Statistic Profit";
}
<h1>Thống kê tài khoản</h1>
<div>
    <div class="row">
        <div class="col-12">
            <div class="row">
                <div class="col-3">
                    <span>Từ ngày: </span>
                    <input type="date" class="form-control customform-control" id="fromDateInput" value="2024-01-03">
                </div>
                <div class="col-3">
                    <span>Đến ngày: </span>
                    <input type="date" class="form-control customform-control" id="toDateInput" value="2024-02-03">
                </div>
                <div class="col-3">
                    
                </div>
                <div class="col-3">
                    <button onclick="fetchDataAndRenderChart()" class="btn btn-primary mt-3 customstyle-button" type="button">Thống kê</button>
                </div>
            </div>
        </div>
        <div class="row col-12">
            <div class="col-7 border-end mt-2">
                <canvas id="myChartTotal" class="me-2"></canvas>
            </div>
            <div class="col-5 mt-4">
                <h6>Thống kê đơn</h6>
                <span id="spanRequestStatistic">Thống kê đơn</span>
                <dl id="statisRequestInformation" class="row mt-2">
                    <dt class="col-8">Tổng số hóa đơn được tạo:</dt>
                    <dd class="col-4"></dd>
                    <dt class="col-8">Tổng số hóa đơn đã thanh toán:</dt>
                    <dd class="col-4"></dd>
                    <dt class="col-8">Tổng số hóa đơn đã hủy:</dt>
                    <dd class="col-4"></dd>
                    <dt class="col-8">Tổng số đơn hoàn trả:</dt>
                    <dd class="col-4"></dd>
                    @* <dt class="col-8">Số lượng đơn nhận lớp tạo ra:</dt>
                    <dd class="col-4"></dd> *@
                </dl>
            </div>

        </div>
        <div class="row">
            <div class="col-6">
                <canvas id="myChartDeposit" class="m-2"></canvas>
            </div>
            <div class="col-6">
                <canvas id="myChartRefund" class="m-2"></canvas>
            </div>
        </div>
    </div>
</div>


<script>
    let oldChartTotal;
    let oldChartDeposit;
    let oldChartRefund;
    let currentDate = new Date();
    let previousMonthDate = new Date(currentDate);
    previousMonthDate.setMonth(currentDate.getMonth() - 1);

    document.getElementById('toDateInput').value = currentDate.toISOString().slice(0, 10);
    document.getElementById('fromDateInput').value = previousMonthDate.toISOString().slice(0, 10);

    function fetchDataAndRenderChart() {
        var fromDate = document.getElementById('fromDateInput').value; // Get value from fromDateInput
        var toDate = document.getElementById('toDateInput').value; // Get value from toDateInput
        $.ajax({
            url: '/Statistic/GetChartProfit',
            type: 'GET',
            data: {
                fromDate: fromDate,
                toDate: toDate
            },
            success: function (dataFromServer) {
                document.getElementById('spanRequestStatistic').innerHTML =
                    `Từ ngày ${fromDate} đến ngày ${toDate}`;
                let statistic = dataFromServer.statis;
                document.getElementById('statisRequestInformation').innerHTML =
                    `
                        <dt class="col-8">Tổng số hóa đơn được tạo:</dt>
                            <dd class="col-4">${statistic.totalTransactions}</dd>
                        <dt class="col-8">Tổng số hóa đơn đã thanh toán:</dt>
                            <dd class="col-4">${statistic.totalTransactionsPaid}</dd>
                        <dt class="col-8">Tổng số hóa đơn đã hủy:</dt>
                            <dd class="col-4">${statistic.totalTransactionsCancel}</dd>
                        <dt class="col-8">Tổng số đơn hoàn trả:</dt>
                                <dd class="col-4">${statistic.totalTransactionsRefund}</dd>

                    `
                    ;
                renderChartTotal(dataFromServer.chart);
                renderChartDeposit(dataFromServer.chart);
                renderChartRefund(dataFromServer.chart);
            },
            error: function (xhr, status, error) {
                console.error(error);
            }
        });
    }

    function renderChartTotal(dataFromServer) {
        // Extracting data for labels and values
        var labels = dataFromServer.map(function (item) {
            return item.type_date_year + '-' + item.type_date_month + '-' + item.type_date_day;
        });

        const values = dataFromServer.map(entry => entry.profit);

        var ctx = document.getElementById('myChartTotal').getContext('2d');
        if (oldChartTotal) {
            oldChartTotal.destroy();
        }
        var myChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Total Profit',
                    data: values,
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
        oldChartTotal = myChart;
    }
    function renderChartDeposit(dataFromServer) {
        // Extracting data for labels and values
        var labels = dataFromServer.map(function (item) {
            return item.type_date_year + '-' + item.type_date_month + '-' + item.type_date_day;
        });

        const values = dataFromServer.map(entry => entry.deposit_amount);

        var ctx = document.getElementById('myChartDeposit').getContext('2d');
        if (oldChartDeposit) {
            oldChartDeposit.destroy();
        }
        var myChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Deposit Creation',
                    data: values,
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
        oldChartDeposit = myChart;
    }
    function renderChartRefund(dataFromServer) {
        // Extracting data for labels and values
        var labels = dataFromServer.map(function (item) {
            return item.type_date_year + '-' + item.type_date_month + '-' + item.type_date_day;
        });

        const values = dataFromServer.map(entry => entry.refund_amount);


        var ctx = document.getElementById('myChartRefund').getContext('2d');
        if (oldChartRefund) {
            oldChartRefund.destroy();
        }
        var myChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Refund Creation',
                    data: values,
                    backgroundColor: 'rgba(54, 162, 235, 0.2)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
        oldChartRefund = myChart;
    }
    fetchDataAndRenderChart();
</script>